def In(element,list1):
    flag=0
    for i in range(len(list1)):
        if element==list[i]:
            flag=1
        if flag==1:
            return True
        else:
            return False
def first_appe(string,substring):
    flag=0
    for i in range(len(substring)):
        if In(substring[i],string):
            flag+=1def in_list(element, list1):
    return element in list1

def first_appe(string, substring):
    if substring in string:
        return string.index(substring[0])
    return 0

def revstr(string):
    return string[::-1]

def str_count(str1, char):
    return str1.count(char)

def max_len(splitL):
    return max(splitL, key=len)

def is_palindrome(str):
    return str == str[::-1]

str1 = input("Enter string to check palindrome:-")
if is_palindrome(str1):
    print("Entered string is palindrome")
else:
    print("Entered string is not palindrome")

if revstr(str1) == str1:
    print("Entered string is palindrome(using reverse string method)")
else:
    print("Entered string is not palindrome(using reverse string method)")

str2 = input("Enter sentence to check maximum length of word: ")
new = str2.split()
print("Length:", len(max_len(new)), "Word:", max_len(new))

str3 = input("Enter string to check particular character count: ")
ch = input("Enter character: ")
print("Entered character count is:", str_count(str3, ch))

str4 = input("Enter string to check first appearance of substring: ")
substring = input("Enter substring: ")
print(substring, "is at index:", first_appe(str4, substring))
    if flag==len(substring):
        for i in range(len(string)):
             if substring[0]==string[i]:
                 return i
    return 0
def revstr(string):
    revstr=""
    for i in range(len(string)):
        revstr=string[i]+revstr
    return revstr
def str_count(str1,char):
    count=0
    for i in range(len(str1)):
        if char==str1[i]:
            count+=1
    return count
def max_len(splitL):
    global new_str2
    len1=0
    new_str1=""
    for i in range(len(splitL)):
        if len1<len(splitL[i]):
            len1=len(splitL[i])
            new_str2=new_str1+splitL[i]
    return len1
def is_palindrome(str):
    for i in range(0,int(len(str)/2)):
        if str[i]!=str[len(str)-i-1]:
            return False
    return True
str1=input("Enter string to check palindrome:-")
if is_palindrome(str1):
           print("Entered string is palindrome")
else:
    print("Entered string is not palindrome")
if revstr(str1)==str1:
    print("Entered string is palindrome(using reverse string method)")
else:
    print("Entered string is not palindrome(using reverse string method)")
str2=input("Enter sentence to check maximun length of word:")
new=str2.split()
print("Length:",max_len(new),"Word:",new_str2)
str3=input("Enter string to check particular character count:")
ch=input("Entered character:")
print("Entered character count is:",str_count(str3,ch))

str4=input("Enter string to check first apperance of substring:")
substring=input("Enter substring:")
print(substring,"is at index:",first_appe(str4,substring))





Enter string to check palindrome:- civic
Entered string is palindrome
Entered string is palindrome(using reverse string method)
Enter sentence to check maximun length of word: Fundamental
Length: 11 Word: Fundamental
Enter string to check particular character count: Data
Entered character: D
Entered character count is: 1
Enter string to check first apperance of substring: Fundamental
Enter substring: F
F is at index: 0